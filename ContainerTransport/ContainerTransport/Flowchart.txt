===============================
 FLOWCHART CONTAINER TRANSPORT
===============================
 REQUIREMENTS
================
DUTCH
========
•	Het maximum gewicht bovenop een container is 120 ton.
•	Een volle container weegt maximaal 30 ton. Een lege container weegt 4000 kg.
•	Er mag niets bovenop een container met waardevolle lading worden gestapeld; wel mogen deze containers zelf op andere containers geplaatst worden.
•	Een container met waardevolle lading moet altijd via de voor- of achterkant te benaderen zijn. Je mag er vanuit gaan dat ook gestapelde containers te benaderen zijn.
•	Alle containers die gekoeld moeten blijven moeten in de eerste rij worden geplaatst vanwege de stroomvoorziening die aan de voorkant van elk schip zit.
•	Om kapseizen te voorkomen moet ten minste 50% van het maximum gewicht van een schip zijn benut.
•	Het schip moet in evenwicht zijn: het volledige gewicht van de containers voor iedere helft mag niet meer dan 20% verschillen.
•	De afmeting van een schip moet instelbaar zijn in de applicatie, waarbij de hoogte en breedte in containers aangegeven kan worden.
========
ENGLISH
========
• The maximum weight on top of a container is 120 tons.
• A full container weighs a maximum of 30 tons. An empty container weighs 4000 kg.
• Nothing may be stacked on top of a container with valuable cargo; however, these containers may themselves be placed on other containers.
• A container with valuable cargo must always be approachable via the front or back. You can assume that stacked containers can also be approached.
• All containers that need to be refrigerated must be placed in the first row because of the power supply on the front of each ship.
• A ship has a maximum weight it can carry. To prevent capsizing, at least 50% of the maximum weight of a ship must be used.
• The ship must be in balance: the full weight of the containers for each half must not differ by more than 20%.
• The size of a ship must be adjustable in the application, whereby the length and width can be indicated in containers.
====================================
NECCESITIES PLACING CONTAINERS
====================================
- Cooled containers need to be placed first. Always in front. Normal containers second. Not in front or back unless no other option possible. Valuable cooled containers third. Always on top and in front. Valuable containers last. Always on top and in front or back.
- No two valuable containers can be stacked on top of each other.
- Place containers in center for as long as there is a slot with no container in center. Center weight is divided in half over both sides.
- If every slot on center has a container and there is no container on the left or right, place one left.
- Check for ship balance and place on next side with least weight. Always try to place on slot with least containers.
- If the lightest weighted side is full, place on center. Always try to place on slot with least containers.
- If the center is full, place on heavier side. Always try to place on slot with least containers.
- Repeat for next container.
- A slot cannot contain 2 valuable containers. A valuable container has to always be on top.
- We want the heaviest containers on the bottom, so that more can be stacked on top.
- We need to know which slots are available for the given container.
-----------------------------------------------------------------------------------------------------------------------------------------

====================================
CLASSES:				INTERFACES:
====================================
- Ship					- IShip
- Dock					- IDock					(ON STARTUP)
- Container				- IContainer			ENUM: ContainerType
- ContainerShipLoader	- IContainerShipLoader	<- Implements ILoader			
- Slot					- ISlot															
- ContainerTransportController
=====================================================================================================================================================================
MAIN FLOW BUILDING SHIP																							ADMINISTRATION
=====================================================================================================================================================================
																										INPUT:	Ship size (Length and Width in containers), BuildShip()
												
																										PROCESS: 			
																												int length = GetLengthInput()
																												int width = GetHeightInput()
0. Instantiate creation with given input.																		dock.BuildShip(length, height)

1. Assign ship values in constructor																			IShip ship = new Ship(length, width)
																												
2. Assign slots to side																							
																		
DONE! 
======================================================================================================================================================================
MAIN FLOW BUILDING CONTAINERS																					ADMINISTRATION
======================================================================================================================================================================
																										INPUT:	Weight of container, Type of container, BuildContainer(int weight, ContainerType type)

																										PROCESS:
																												ContainerType type = ConvertSelectionToType(string/int selection)
																												int weight = baseWeight

1. Check if container would be overweight.																		bool OverweightWithAddedWeight(int addedWeight)
		|
		|
		1. If not overweight, create the new container with values and add it to the list.						SetContainerValues(int addedWeight, ContainerType type)
		|
		|
		2. If overweight, dump the container >:(																container = null;

DONE!
======================================================================================================================================================================
MAIN FLOW LOADING SHIP																							ADMINISTRATION
======================================================================================================================================================================
																										INPUT:	List of containers, StartLoading()

																										PROCESS:
0. Initiate ContainerShipLoader																					IContainerShipLoader shiploader = new ContainerShipLoader()			

1. Get list of containers and sort by weight																	IContainer unloadedContainers = dock.GetContainers()

2. As long as there are refrigerated containers, get next refrigerated container								Find unloadedContainers.ContainerType == refrigerated
		|
		|
		1. Get optimal slot for refrigerated container															GetRefrigeratedContainerSlot()		
		|
		2. If a slot is returned. Place refrigerated container on slot.									PlaceContainerOnSlot(IContainer container, ISlot slot)
		|
		3. Else, Tell the user that there is no slot to load given container on.											

3. Repeat 2 for Normal containers

4. Repeat 2 for containers that are both valuable and refrigerated

5. Repeat 2 for Valuable containers
======================================================================================================================================================================
MAIN FLOW SLOT OCCUPATION																						ADMINISTRATION
======================================================================================================================================================================
																										INPUT: container, FindContainerTypeSlot()

																										PROCESS:
0. Based on which type of container was given, we need to get all the available slots for container.		    List<ISlot> openSlots = list of slots that are available to given type

1. Get get best slot.																							ISlot bestSlot = GetBestSlot(openSlots) 										
		|
		|
		1. Get the slots from the best side. And check if not empty.											slotsBestSide = openSlots.Find(x => x.ShipSide == ship.GetLightestSide()) if(slotsBestSide.Count != 0)
		|
		|
		2. If it isnt empty, take the lightest of the slots.													bestSlot = GetLightestOfSide(slotsBestSide) slotsBestSide.Orderby(x => x.SlotWeight).First();
		|
		|
		3. If there is no slot on given side, get the slots in center. And check if not empty.					slotsCenterSide = openSlots.Find(x => x.ShipSide == Center) if(slotsCenterSide.Count != 0)
		|
		|
		4. If it isnt empty, take the lightest of the slots.													bestSlot = GetLightestOfSide(slotsBestSide) slotsBestSide.Orderby(x => x.SlotWeight).First();
		|
		|
		5. If the center is full too, get the heaviest side and check if not empty.								slotssHeavySide = openSlots.Find(x => x.ShipSide == sip.GetHeaviestSide()) if(slotsCenterSide.Count != 0)
4. Return the best slot.
======================================================================================================================================================================
MAIN FLOW SHIP BALANCE																							ADMINISTRATION
======================================================================================================================================================================
																										INPUT: Get ship balance bounds, GetSideToPlaceContainerOn()
																										
																										PROCESS:
0. After loading, check if at least 50% of ship max weight has been used.										if(ship.MaxWeight / 2  >= loadedContainers) 

	A. Return that middle																						return center


•	Om kapseizen te voorkomen moet ten minste 50% van het maximum gewicht van een schip zijn benut.
•	Het schip moet in evenwicht zijn: het volledige gewicht van de containers voor iedere helft mag niet meer dan 20% verschillen.

======================================================================================================================================================================
POSSIBLE ADDITIONS FOR IMPROVEMENT
======================================================================================================================================================================
- Add functionality for the loader to rebalance ship when the final balance is out of bounds by looking at possibilities to move containers from the heavier side
  to the center or by moving containers from the center to the lighter side.
- Add dynamic visuals.
